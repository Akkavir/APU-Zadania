# Wczytanie danych z pliku CSV
data <- read.csv("smartfony.csv")
data
# Funkcja do normalizacji danych
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
# Wybór odpowiednich kolumn dla analizy
iPady_simplified <- data[, c('ram', 'pamiec', 'aparat', 'cena')]
iPady_normalized <- as.data.frame(lapply(iPady_simplified, normalize))  # Normalizacja danych
# Podział danych na zbiór treningowy i testowy
traindata <- iPady_normalized
testdata <- iPady_normalized[1:3, ]
# Tworzenie modelu sieci neuronowej
iPady <- neuralnet(cena ~ ram + pamiec + aparat, data = traindata,
hidden = c(3, 2), threshold = 0.01)
# Wyświetlenie informacji o modelu
print(iPady)
plot(iPady)
# Obliczenie wyników dla danych testowych
iPady.results <- compute(iPady, testdata)
print(iPady.results$net.result)
# Porównanie przewidywanych wartości z wartościami rzeczywistymi
comparison <- data.frame(actual = testdata[, 'cena'], prediction = iPady.results$net.result)
comparison
# Wczytanie danych
dane <- read.csv("smartfony.csv", sep=",", header=TRUE)
# Przekształcenie zmiennych kategoricznych na zmienne dummy
dane_dummy <- model.matrix(cena ~ ., data=dane)
# Podział danych na zbiór treningowy i testowy
library(caret)
index <- createDataPartition(dane_dummy$cena, p=0.8, list=FALSE)
zbior_treningowy <- dane_dummy[index, ]
zbior_testowy <- dane_dummy[-index, ]
# Trenowanie modelu sieci neuronowej
library(neuralnet)
model <- neuralnet(cena ~ ., data=zbior_treningowy, hidden=c(5,3), linear.output=TRUE)
# Prognozowanie cen na zbiorze testowym
prognozy <- compute(model, zbior_testowy[-1])$net.result
# Ocena błędu prognozy
blad <- mean((zbior_testowy[,1] - prognozy)^2)
# Wczytanie danych
dane <- read.csv("smartfony.csv", sep=",", header=TRUE)
# Przekształcenie zmiennych kategoricznych na zmienne dummy
dane_dummy <- model.matrix(cena ~ ., data=dane)
# Podział danych na zbiór treningowy i testowy
library(caret)
index <- createDataPartition(dane_dummy$cena, p=0.8, list=FALSE)
zbior_treningowy <- dane_dummy[index, ]
zbior_testowy <- dane_dummy[-index, ]
# Trenowanie modelu sieci neuronowej
library(neuralnet)
model <- neuralnet(cena ~ ., data=zbior_treningowy, hidden=c(5,3), linear.output=TRUE)
# Prognozowanie cen na zbiorze testowym
prognozy <- compute(model, zbior_testowy[-1])$net.result
# Ocena błędu prognozy
blad <- mean((zbior_testowy[,1] - prognozy)^2)
library(ggplot2)
dataset <- read.csv("smartfony");
#train_data <- file_data['wielkosc':'ocenaKlientow'];
normalize <- function(x) return (x / max(x));
dataset_normalized <- as.data.frame(lapply(dataset, normalize))
dataset_normalized <- dataset_normalized[sample(1:nrow(dataset_normalized)), ]
library(neuralnet)
n <- nrow(dataset_normalized)
train_data_precent <- 0.7
train_data <- dataset_normalized[1:(n * train_data_precent),]
test_data <- dataset_normalized[1:(n * (1 -train_data_precent)),]
set.seed(2)
nn <- neuralnet(Cena ~., data=train_data, hidden=c(100, 50 ,25), threshold=0.001, linear.output = F)
plot(nn)
result <- compute(nn, test_data)
calculated_x <- as.numeric(test_data$Cena)
calculated_y <- result[["net.result"]]
plot(calculated_x, calculated_y)
error <- sqrt(sum((as.numeric(test_data$Cena)-calculated_y)^2)/length(calculated_y))
library(ggplot2)
dataset <- read.csv("smartfony");
train_data <- file_data['wielkosc':'ocenaKlientow'];
normalize <- function(x) return (x / max(x));
dataset_normalized <- as.data.frame(lapply(dataset, normalize))
dataset_normalized <- dataset_normalized[sample(1:nrow(dataset_normalized)), ]
library(neuralnet)
n <- nrow(dataset_normalized)
train_data_precent <- 0.7
train_data <- dataset_normalized[1:(n * train_data_precent),]
test_data <- dataset_normalized[1:(n * (1 -train_data_precent)),]
set.seed(2)
nn <- neuralnet(Cena ~., data=train_data, hidden=c(100, 50 ,25), threshold=0.001, linear.output = F)
plot(nn)
result <- compute(nn, test_data)
calculated_x <- as.numeric(test_data$Cena)
calculated_y <- result[["net.result"]]
plot(calculated_x, calculated_y)
error <- sqrt(sum((as.numeric(test_data$Cena)-calculated_y)^2)/length(calculated_y))
library(ggplot2)
dataset <- read.csv("smartfony");
#train_data <- file_data['wielkosc':'ocenaKlientow'];
normalize <- function(x) return (x / max(x));
dataset_normalized <- as.data.frame(lapply(dataset, normalize))
dataset_normalized <- dataset_normalized[sample(1:nrow(dataset_normalized)), ]
library(neuralnet)
n <- nrow(dataset_normalized)
train_data_precent <- 0.7
train_data <- dataset_normalized[1:(n * train_data_precent),]
test_data <- dataset_normalized[1:(n * (1 -train_data_precent)),]
set.seed(2)
nn <- neuralnet(Cena ~., data=train_data, hidden=c(100, 50 ,25), threshold=0.001, linear.output = F)
plot(nn)
result <- compute(nn, test_data)
calculated_x <- as.numeric(test_data$Cena)
calculated_y <- result[["net.result"]]
plot(calculated_x, calculated_y)
error <- sqrt(sum((as.numeric(test_data$Cena)-calculated_y)^2)/length(calculated_y))
test_data <- dataset_normalized[1:(n * (1 -train_data_precent)),]
dataset <- read.csv("smartfony");
#train_data <- file_data['wielkosc':'ocenaKlientow'];
normalize <- function(x) return (x / max(x));
dataset_normalized <- as.data.frame(lapply(dataset, normalize))
dataset_normalized <- dataset_normalized[sample(1:nrow(dataset_normalized)), ]
library(neuralnet)
n <- nrow(dataset_normalized)
train_data_precent <- 0.7
train_data <- dataset_normalized[1:(n * train_data_precent),]
test_data <- dataset_normalized[1:(n * (1 -train_data_precent)),]
dataset <- read.csv("monitors.csv");
normalize <- function(x) return (x / max(x));
dataset_normalized <- as.data.frame(lapply(dataset, normalize))
dataset_normalized <- dataset_normalized[sample(1:nrow(dataset_normalized)), ]
n <- nrow(dataset_normalized)
train_data_precent <- 0.7
train_data <- dataset_normalized[1:(n * train_data_precent),]
test_data <- dataset_normalized[1:(n * (1 -train_data_precent)),]
set.seed(2)
nn <- neuralnet(Cena ~., data=train_data, hidden=c(100, 50 ,25), threshold=0.001, linear.output = F)
plot(nn)
result <- compute(nn, test_data)
calculated_x <- as.numeric(test_data$Cena)
calculated_y <- result[["net.result"]]
plot(calculated_x, calculated_y)
error <- sqrt(sum((as.numeric(test_data$Cena)-calculated_y)^2)/length(calculated_y))
data <- read.csv("smartfony.csv")
data
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
iPady_simplified <- data[, c('ram', 'pamiec', 'aparat', 'cena')]
gc()
dataset <- read.csv("smartfony.csv");
train_data <- file_data['cena':'ocena_klientow'];
dataset <- read.csv("smartfony.csv");
train_data <- file_data['cena':'ocena_klientow'];
normalize <- function(x) return (x / max(x));
dataset_normalized <- as.data.frame(lapply(dataset, normalize))
dataset <- read.csv("smartfony.csv");
normalize <- function(x) return (x / max(x));
View(normalize)
dataset_normalized <- as.data.frame(lapply(dataset, normalize))
dataset_normalized <- dataset_normalized[sample(1:nrow(dataset_normalized)), ]
n <- nrow(dataset_normalized)
train_data_precent <- 0.7
train_data <- dataset_normalized[1:(n * train_data_precent),]
test_data <- dataset_normalized[1:(n * (1 -train_data_precent)),]
set.seed(2)
nn <- neuralnet(Cena ~., data=train_data, hidden=c(100, 50 ,25), threshold=0.001, linear.output = F)
nn <- neuralnet(cena ~., data=train_data, hidden=c(100, 50 ,25), threshold=0.001, linear.output = F)
plot(nn)
result <- compute(nn, test_data)
calculated_x <- as.numeric(test_data$Cena)
calculated_y <- result[["net.result"]]
plot(calculated_x, calculated_y)
error <- sqrt(sum((as.numeric(test_data$Cena)-calculated_y)^2)/length(calculated_y))
dataset <- read.csv("smartfony.csv");
#train_data <- file_data['cena':'ocena_klientow'];
normalize <- function(x) return (x / max(x));
dataset_normalized <- as.data.frame(lapply(dataset, normalize))
dataset_normalized <- dataset_normalized[sample(1:nrow(dataset_normalized)), ]
n <- nrow(dataset_normalized)
train_data_precent <- 0.7
train_data <- dataset_normalized[1:(n * train_data_precent),]
test_data <- dataset_normalized[1:(n * (1 -train_data_precent)),]
set.seed(2)
nn <- neuralnet(cena ~., data=train_data, hidden=c(100, 50 ,25), threshold=0.001, linear.output = F)
plot(nn)
result <- compute(nn, test_data)
calculated_x <- as.numeric(test_data$Cena)
calculated_y <- result[["net.result"]]
plot(calculated_x, calculated_y)
error <- sqrt(sum((as.numeric(test_data$Cena)-calculated_y)^2)/length(calculated_y))
dataset <- read.csv("smartfony.csv");
dataset <- read.csv("smartfony.csv");
#train_data <- file_data['cena':'ocena_klientow'];
normalize <- function(x) return (x / max(x));
dataset_normalized <- as.data.frame(lapply(dataset, normalize))
dataset_normalized <- dataset_normalized[sample(1:nrow(dataset_normalized)), ]
n <- nrow(dataset_normalized)
train_data_precent <- 0.7
train_data <- dataset_normalized[1:(n * train_data_precent),]
test_data <- dataset_normalized[1:(n * (1 -train_data_precent)),]
set.seed(2)
nn <- neuralnet(cena ~., data=train_data, hidden=c(100, 50 ,25), threshold=0.001, linear.output = F)
result <- compute(nn, test_data)
calculated_x <- as.numeric(test_data$Cena)
calculated_y <- result[["net.result"]]
plot(calculated_x, calculated_y)
print(calculated_x.length)
dataset <- read.csv("smartfony.csv")
normalize <- function(x) return (x / max(x))
dataset_normalized <- as.data.frame(lapply(dataset, normalize))
dataset_normalized <- dataset_normalized[sample(1:nrow(dataset_normalized)), ]
n <- nrow(dataset_normalized)
train_data_precent <- 0.7
train_data <- dataset_normalized[1:(n * train_data_precent),]
test_data <- dataset_normalized[(n * train_data_precent + 1):n,]
set.seed(2)
nn <- neuralnet(cena ~., data=train_data, hidden=c(100, 50 ,25), threshold=0.001, linear.output = F)
result <- compute(nn, test_data[-which(names(test_data) == "cena")])
calculated_y <- result$net.result
actual_y <- test_data$cena * max(dataset$cena) # denormalizacja cen
plot(actual_y, calculated_y)
error <- sqrt(sum((actual_y - calculated_y)^2)/length(calculated_y))
plot(nn)
