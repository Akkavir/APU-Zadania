require(xlsx)
library(neuralnet)
library(ggplot2)
df <- read.xlsx("C:/Dane/My_doc/Zhegestovska/Infarcts/NewDatabase/DatabaseEnExtractedTitleBarVer4.xls",
sheetName = "Registry",stringsAsFactors=F)
df[df=="NA"] <- NA
df[df=="infty"] <- NA # for died days
head(df)
inputvariables_cols <- c("Age","sex","Localization_MI","RMI","RMI_time","ammount_IM_anamnesis","died","died_days","combined_pathology","insult","AS","AA",
"CAI","CVI","Pepti_ulcers","gastritis","gallstone_disease","other_diseases","pulmonary_disease","nephrological_disorders","rheumatic_disease",
"thyroid_disorders","angiopathology","gastrointestinal_diseases","oncology","Chronic_obstructive_pulmonary_disease","BMI",
"Smoking","arterial_hypertension","first_time_arterial_hypertension","Diabetes_mellitus_type_2","first_time_Diabetes_mellitus_type_2",
"duration_Diabetes_mellitus_years",
"HR_1stday_MI","SAP_1stday_MI",
"DAP_1stday_MI",
"White_blood_cells_count",
"LVEF"
)
inputvariables_colsExtrOld <- c("Age","RMI","ammount_IM_anamnesis","died_days","insult","AS","AA",
"CAI","CVI","Pepti_ulcers","gastritis","gallstone_disease","pulmonary_disease","nephrological_disorders","rheumatic_disease",
"thyroid_disorders","angiopathology","gastrointestinal_diseases","oncology","Chronic_obstructive_pulmonary_disease","BMI",
"Smoking","arterial_hypertension","first_time_arterial_hypertension",
"White_blood_cells_count",
"LVEF"
)
inputvariables_colsExtr <- c("Age","RMI","died_days","BMI",
"White_blood_cells_count",
"LVEF"
)
df1 <- na.omit(df[,inputvariables_colsExtr])
df1 <- sapply(df1,as.numeric)
maxs <- apply(df1, 2, max)
mins <- apply(df1, 2, min)
scaled <- as.data.frame(scale(df1, center = mins, scale = maxs - mins))
# for NN
set.seed(450)
cv.error <- NULL
test.cv.r <- NULL
k <- 30
inputvariables <- paste0(inputvariables_colsExtr,sep = "+",collapse="")
require(stringr)
inputvariables <- substr(inputvariables,1,nchar(inputvariables)-1)
inputvariables <- stringr::str_remove(inputvariables,'\\+died_days')
#inputvariables <- "Age+RMI+ammount_IM_anamnesis+insult+AS+AA+CAI+CVI+Pepti_ulcers+gastritis+gallstone_disease+pulmonary_disease+nephrological_disorders+rheumatic_disease+thyroid_disorders+angiopathology+gastrointestinal_diseases+oncology+Chronic_obstructive_pulmonary_disease+BMI+Smoking+arterial_hypertension+first_time_arterial_hypertension+White_blood_cells_count+LVEF"
f <- as.formula(paste("died_days ~ ", inputvariables))
#data <- scaled
data <- do.call("rbind", replicate(5, scaled, simplify = FALSE))# replicate data
library(plyr)
pbar <- create_progress_bar('text')
pbar$init(k)
#
index <- list()
train.cv <- list()
test.cv <- list()
nn <- list()
pr.nn <- list()
#
for(i in 1:k){
index[[i]] <- sample(1:nrow(data),round(0.9*nrow(data)))
train.cv[[i]] <- data[index[[i]],]
test.cv[[i]] <- data[-index[[i]],]
nn[[i]] <- neuralnet(f,data=train.cv[[i]],hidden=c(3),linear.output=T)
pr.nn[[i]] <- compute(nn[[i]],test.cv[[i]][,-5]) #without died_days
pr.nn[[i]] <- pr.nn[[i]]$net.result*(max(data$died_days)-min(data$died_days))+min(data$died_days)
#pr.nn[[i]] <- pr.nn[[i]]$net.result
test.cv.r[[i]] <- (test.cv[[i]]$died_days)*(max(data$died_days)-min(data$died_days))+min(data$died_days)
cv.error[i] <- sum((test.cv.r[[i]] - pr.nn[[i]])^2)/nrow(test.cv[[i]])
pbar$step()
}
mean(cv.error)
cv.error
i_star <- which(cv.error == min(cv.error))
#-------- plot
prediction.nn <- list()
for (j in 1:length(pr.nn)) {
prediction.nn[[j]] <- c(t(as.matrix(pr.nn[[j]])))
}
dev.new()
ggplot() +
geom_point(data=data.frame(unlist(prediction.nn),unlist(test.cv.r)), mapping=aes(x=unlist(prediction.nn), y=unlist(test.cv.r))) +
labs(title="NN performance") + theme_bw(base_size = 30)
dev.off()
dev.new()
ggplot() +
geom_line(colour="blue",aes(x=c(seq(0,1,0.1)),y=c(seq(0,1,0.1)))) +
geom_point(data.frame(prediction.nn[[i_star]],test.cv.r[[i_star]]), mapping=aes(x=prediction.nn[[i_star]], y=test.cv.r[[i_star]])) +
labs(title="NN performance") + theme_bw(base_size = 30)
dev.off()
#!!!!!!!!!!!!!!!!!! MINIMAX ML !!!!!!!!!!!!!!!!!
library(mlr)
library(cmaes)
## Define the task
regr.task = makeRegrTask(id = "Surviral_prediction", data = data, target = "died_days")
# tuning parameters
set.seed(1234)
# Define a search space for each learner'S parameter
ps_ksvm = makeParamSet(
makeNumericParam("sigma", lower = -12, upper = 12, trafo = function(x) 2^x)
)
ps_rf = makeParamSet(
makeIntegerParam("num.trees", lower = 1L, upper = 200L)
)
# Choose a resampling strategy
rdesc = makeResampleDesc("CV", iters = 3L)
# Choose a performance measure
#meas = rmse
#meas = timepredict
#meas = list(ber, acc)
#meas = list(rmse, timepredict)
meas = list(rmse, timetrain)
# Choose a tuning method
ctrl = makeTuneControlCMAES(budget = 100L)
# Make tuning wrappers
tuned.ksvm = makeTuneWrapper(learner = "regr.ksvm", resampling = rdesc, par.set = ps_ksvm, control = ctrl, show.info = FALSE)
tuned.rf = makeTuneWrapper(learner = "regr.ranger", resampling = rdesc, par.set = ps_rf, control = ctrl, show.info = FALSE)
## Benchmark experiment
# https://mlr.mlr-org.com/articles/tutorial/benchmark_experiments.html
# Three learners to be compared
lrns = list(makeLearner("regr.lm"), tuned.ksvm, tuned.rf)
#lrns = list(tuned.ksvm, tuned.rf)
# Conduct the benchmark experiment
#bmr = benchmark(learners = lrns, tasks = regr.task, resamplings = rdesc, measures = rmse,
#                show.info = FALSE)
bmr = benchmark(learners = lrns, tasks = regr.task, resamplings = rdesc, measures = meas, show.info = TRUE)
## Performance
getBMRAggrPerformances(bmr)
#plotBMRBoxplots(bmr)
plotBMRBoxplots(bmr,style="box") + theme_bw(base_size = 16)
##
plotBMRBoxplots(bmr, rmse, style = "box") + theme_bw(base_size = 16)
plotBMRBoxplots(bmr, timetrain, style = "box") + theme_bw(base_size = 16)
plotBMRBoxplots(bmr, rmse, style = "violin") + theme_bw(base_size = 16)
plotBMRBoxplots(bmr, timetrain, style = "violin") + theme_bw(base_size = 16)
plotBMRRanksAsBarChart(bmr, pos = "stack")
friedmanTestBMR(bmr)
friedmanPostHocTestBMR(bmr, p.value = 0.05)
# custom plots
perf = getBMRPerformances(bmr, as.df = TRUE)
# Density plots for two tasks
qplot(rmce,
colour = learner.id, facets = . ~ task.id,
data = perf[perf$task.id %in% c("regr.task"), ], geom = "density") +
theme(strip.text.x = element_text(size = 8))
