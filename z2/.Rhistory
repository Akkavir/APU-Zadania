install.packages("ahpsurvey")
# Instalacja i zaimportowanie pakietów
install.packages("ahpsurvey")
# Instalacja i zaimportowanie pakietów
install.packages("ahpsurvey")
install.packages("magrittr")
library(ahpsurvey)
library(magrittr)
# Tworzenie danych wejściowych
smartfony <- data.frame(
nazwa = c("Samsung S23", "Samsung S24", "Samsung S21 FE", "Samsung M15", "Samsung M55", "Samsung A54", "Samsung A55", "Samsung A15", "Samsung M34", "Samsung A34"),
wyświetlacz = c(6.1, 6.2, 6.4, 6.5, 6.7, 6.4, 6.6, 6.5, 6.5, 6.6),
Ram = c(8, 8, 6, 4, 8, 8, 8, 4, 6, 6),
Rom = c(256, 128, 128, 128, 128, 128, 128, 128, 128, 128),
aparat = c(50, 50, 32, 50, 50, 50, 50, 50, 50, 48),
cena = c(3000, 3800, 1900, 700, 1700, 1700, 2100, 900, 1000, 1300)
)
# Tworzenie macierzy porównań dla kryteriów
kryteria <- c("wydajność", "jakość", "styl", "cena")
macierz_kryteriow <- matrix(c(
1, 3, 3, 5,
1/3, 1, 3, 5,
1/3, 1/3, 1, 3,
1/5, 1/5, 1/3, 1
), nrow = 4, byrow = TRUE)
rownames(macierz_kryteriow) <- kryteria
colnames(macierz_kryteriow) <- kryteria
# Obliczanie wag dla kryteriów
wagi_kryteriow <- ahp(matrix(macierz_kryteriow), method = "eigen")$values
# Wyświetlanie wag dla kryteriów
print(wagi_kryteriow)
# Tworzenie macierzy porównań dla alternatyw (smartfonów) dla każdego kryterium
macierz_alternatyw <- smartfony[, c("wyświetlacz", "Ram", "Rom", "aparat", "cena")]
# Normalizacja danych dla każdego kryterium
normalizacja <- function(x) {
(x - min(x)) / (max(x) - min(x))
}
# Obliczanie wag dla kryteriów
wagi_kryteriow <- ahp(matrix(macierz_kryteriow), method = "eigen")$values
# Obliczanie wag dla kryteriów
wagi_kryteriow <- ahp.mat(df = matrix(macierz_kryteriow), atts = kryteria, method = "eigen")$values
# Obliczanie wag dla kryteriów
wagi_kryteriow <- ahp.mat(df = matrix(macierz_kryteriow), atts = kryteria)$values
# Wyświetlanie wag dla kryteriów
print(wagi_kryteriow)
library(ahpsurvey)
library(magrittr)
# Tworzenie danych wejściowych
smartfony <- data.frame(
nazwa = c("Samsung S23", "Samsung S24", "Samsung S21 FE", "Samsung M15", "Samsung M55", "Samsung A54", "Samsung A55", "Samsung A15", "Samsung M34", "Samsung A34"),
wyświetlacz = c(6.1, 6.2, 6.4, 6.5, 6.7, 6.4, 6.6, 6.5, 6.5, 6.6),
Ram = c(8, 8, 6, 4, 8, 8, 8, 4, 6, 6),
Rom = c(256, 128, 128, 128, 128, 128, 128, 128, 128, 128),
aparat = c(50, 50, 32, 50, 50, 50, 50, 50, 50, 48),
cena = c(3000, 3800, 1900, 700, 1700, 1700, 2100, 900, 1000, 1300)
)
# Tworzenie macierzy porównań dla kryteriów
kryteria <- c("wydajność", "jakość", "styl", "cena")
macierz_kryteriow <- matrix(c(
1, 3, 3, 5,
1/3, 1, 3, 5,
1/3, 1/3, 1, 3,
1/5, 1/5, 1/3, 1
), nrow = 4, byrow = TRUE)
rownames(macierz_kryteriow) <- kryteria
colnames(macierz_kryteriow) <- kryteria
# Obliczanie wag dla kryteriów
wagi_kryteriow <- ahp.mat(df = matrix(macierz_kryteriow), atts = kryteria)$values
# Wyświetlanie wag dla kryteriów
print(wagi_kryteriow)
wagi_kryteriow <- ahp(matrix(macierz_kryteriow), method = "geometric")$values
# Load required packages
library(Rcpp)
library(RcppEigen)
library(rlist)
# Define the criteria
criteria <- c("performance", "quality", "style", "price")
# Pairwise comparison matrix for criteria
criteria_matrix <- matrix(1, nrow = length(criteria), ncol = length(criteria))
rownames(criteria_matrix) <- colnames(criteria_matrix) <- criteria
# Populate the matrix with pairwise comparisons
criteria_matrix["performance", "quality"] <- 3   # Example values, you can adjust these based on actual comparisons
criteria_matrix["performance", "style"] <- 2
criteria_matrix["performance", "price"] <- 5
criteria_matrix["quality", "style"] <- 4
criteria_matrix["quality", "price"] <- 3
criteria_matrix["style", "price"] <- 2
# Reflect the values across the diagonal
criteria_matrix <- reflect(criteria_matrix)
# Calculate the weights for criteria
criteria_weights <- calc_w(criteria_matrix)
# Print the criteria weights
criteria_weights
# Define the smartphones and their attributes
smartphones <- c("Samsung S23", "Samsung S24", "Samsung S21 FE", "Samsung M15", "Samsung M55", "Samsung A54", "Samsung A55", "Samsung A15", "Samsung M34", "Samsung A34")
attributes <- data.frame(
display = c(6.1, 6.2, 6.4, 6.5, 6.7, 6.4, 6.6, 6.5, 6.5, 6.6),
ram = c(8, 8, 6, 4, 8, 8, 8, 4, 6, 6),
rom = c(256, 128, 128, 128, 128, 128, 128, 128, 128, 128),
camera = c(50, 50, 32, 50, 50, 50, 50, 50, 50, 48),
price = c(3000, 3800, 1900, 700, 1700, 1700, 2100, 900, 1000, 1300)
)
rownames(attributes) <- smartphones
# Define the criteria weights (replace with actual values)
criteria_weights <- list(
performance = 0.4,
quality = 0.3,
style = 0.2,
price = 0.1
)
# Calculate overall scores for each smartphone
overall_scores <- rowSums(attributes * sapply(criteria_weights, rep, nrow(attributes)))
# Rank smartphones based on overall scores
ranked_smartphones <- smartphones[order(overall_scores, decreasing = TRUE)]
# Print the ranked smartphones
ranked_smartphones
# Load required packages
library(Rcpp)
library(RcppEigen)
library(rlist)
# Define the criteria
criteria <- c("performance", "quality", "style", "price")
# Pairwise comparison matrix for criteria
criteria_matrix <- matrix(1, nrow = length(criteria), ncol = length(criteria))
rownames(criteria_matrix) <- colnames(criteria_matrix) <- criteria
# Populate the matrix with pairwise comparisons
criteria_matrix["performance", "quality"] <- 3   # Example values, you can adjust these based on actual comparisons
criteria_matrix["performance", "style"] <- 2
criteria_matrix["performance", "price"] <- 5
criteria_matrix["quality", "style"] <- 4
criteria_matrix["quality", "price"] <- 3
criteria_matrix["style", "price"] <- 2
# Reflect the values across the diagonal
criteria_matrix <- reflect(criteria_matrix)
# Calculate the weights for criteria using AHP
criteria_weights <- calc_w(criteria_matrix)
# Print the criteria weights
criteria_weights
# Define the smartphones and their attributes
smartphones <- c("Samsung S23", "Samsung S24", "Samsung S21 FE", "Samsung M15", "Samsung M55", "Samsung A54", "Samsung A55", "Samsung A15", "Samsung M34", "Samsung A34")
attributes <- data.frame(
display = c(6.1, 6.2, 6.4, 6.5, 6.7, 6.4, 6.6, 6.5, 6.5, 6.6),
ram = c(8, 8, 6, 4, 8, 8, 8, 4, 6, 6),
rom = c(256, 128, 128, 128, 128, 128, 128, 128, 128, 128),
camera = c(50, 50, 32, 50, 50, 50, 50, 50, 50, 48),
price = c(3000, 3800, 1900, 700, 1700, 1700, 2100, 900, 1000, 1300)
)
rownames(attributes) <- smartphones
# Calculate overall scores for each smartphone using AHP weights
overall_scores <- rowSums(attributes * sapply(criteria_weights, rep, nrow(attributes)))
# Rank smartphones based on overall scores
ranked_smartphones <- smartphones[order(overall_scores, decreasing = TRUE)]
# Print the ranked smartphones
ranked_smartphones
install.packages("ahp")
install.packages("D:\Torrent\ahp_0.2.12.tar.gz",repos=NULL,type = "source")
install.packages("D:/Torrent/ahp_0.2.12.tar.gz",repos=NULL,type = "source")
library(ahp)
# Define the criteria
criteria <- c("performance", "quality", "style", "price")
install.packages("D:/Torrent/ahp_0.2.12.tar.gz",repos=NULL,type = "source")
install.packages(c("data.tree", "formattable", "DiagrammeR"))
library(ahp)
install.packages("D:/Torrent/ahp_0.2.12.tar.gz",repos=NULL,type = "source")
install.packages(c("DiagrammeR"))
install.packages("D:/Torrent/ahp_0.2.12.tar.gz",repos=NULL,type = "source")
install.packages(c("igraph"))
install.packages(c("igraph"))
install.packages(c("DiagrammeR"))
install.packages("D:/Torrent/ahp_0.2.12.tar.gz",repos=NULL,type = "source")
install.packages(c("data.tree"))
# Install and load the ahp package
install.packages("D:/Torrent/ahp_0.2.12.tar.gz",repos=NULL,type = "source")
install.packages(c("formattable"))
install.packages("D:/Torrent/ahp_0.2.12.tar.gz",repos=NULL,type = "source")
# Define the criteria
criteria <- c("performance", "quality", "style", "price")
# Pairwise comparison matrix for criteria
criteria_matrix <- matrix(1, nrow = length(criteria), ncol = length(criteria))
rownames(criteria_matrix) <- colnames(criteria_matrix) <- criteria
# Populate the matrix with pairwise comparisons
criteria_matrix["performance", "quality"] <- 3   # Example values, you can adjust these based on actual comparisons
criteria_matrix["performance", "style"] <- 2
criteria_matrix["performance", "price"] <- 5
criteria_matrix["quality", "style"] <- 4
criteria_matrix["quality", "price"] <- 3
criteria_matrix["style", "price"] <- 2
# Reflect the values across the diagonal
criteria_matrix <- reflect(criteria_matrix)
library(ahp)
# Define the criteria
criteria <- c("performance", "quality", "style", "price")
# Pairwise comparison matrix for criteria
criteria_matrix <- matrix(1, nrow = length(criteria), ncol = length(criteria))
rownames(criteria_matrix) <- colnames(criteria_matrix) <- criteria
# Populate the matrix with pairwise comparisons
criteria_matrix["performance", "quality"] <- 3   # Example values, you can adjust these based on actual comparisons
criteria_matrix["performance", "style"] <- 2
criteria_matrix["performance", "price"] <- 5
criteria_matrix["quality", "style"] <- 4
criteria_matrix["quality", "price"] <- 3
criteria_matrix["style", "price"] <- 2
# Reflect the values across the diagonal
# Reflect the values across the diagonal in the pairwise comparison matrix
for (i in 1:length(criteria)) {
for (j in (i+1):length(criteria)) {
criteria_matrix[j, i] <- 1 / criteria_matrix[i, j]
}
}
library(ahp)
# Define the criteria
criteria <- c("performance", "quality", "style", "price")
# Pairwise comparison matrix for criteria
criteria_matrix <- matrix(1, nrow = length(criteria), ncol = length(criteria))
rownames(criteria_matrix) <- colnames(criteria_matrix) <- criteria
# Populate the matrix with pairwise comparisons
criteria_matrix["performance", "quality"] <- 3   # Example values, you can adjust these based on actual comparisons
criteria_matrix["performance", "style"] <- 2
criteria_matrix["performance", "price"] <- 5
criteria_matrix["quality", "style"] <- 4
criteria_matrix["quality", "price"] <- 3
criteria_matrix["style", "price"] <- 2
# Reflect the values across the diagonal in the pairwise comparison matrix
for (i in 1:length(criteria)) {
for (j in (i+1):length(criteria)) {
criteria_matrix[j, i] <- 1 / criteria_matrix[i, j]
}
}
# Install and load the ahp package
#install.packages("D:/Torrent/ahp_0.2.12.tar.gz",repos=NULL,type = "source")
#install.packages(c("data.tree"))
#install.packages(c("formattable"))
library(ahp)
# Define the criteria
criteria <- c("performance", "quality", "style", "price")
# Pairwise comparison matrix for criteria
criteria_matrix <- matrix(1, nrow = length(criteria), ncol = length(criteria))
rownames(criteria_matrix) <- colnames(criteria_matrix) <- criteria
# Populate the matrix with pairwise comparisons
criteria_matrix["performance", "quality"] <- 3   # Example values, you can adjust these based on actual comparisons
criteria_matrix["performance", "style"] <- 2
criteria_matrix["performance", "price"] <- 5
criteria_matrix["quality", "style"] <- 4
criteria_matrix["quality", "price"] <- 3
criteria_matrix["style", "price"] <- 2
# Reflect the values across the diagonal
criteria_matrix <- reflect(criteria_matrix)
# Install and load the ahp package
#install.packages("D:/Torrent/ahp_0.2.12.tar.gz",repos=NULL,type = "source")
#install.packages(c("data.tree"))
#install.packages(c("formattable"))
# Install and load the ahp package
library(ahp)
# Define the criteria
criteria <- c("performance", "quality", "style", "price")
# Pairwise comparison matrix for criteria
criteria_matrix <- matrix(1, nrow = length(criteria), ncol = length(criteria))
rownames(criteria_matrix) <- colnames(criteria_matrix) <- criteria
# Populate the matrix with pairwise comparisons
criteria_matrix["performance", "quality"] <- 3   # Example values, you can adjust these based on actual comparisons
criteria_matrix["performance", "style"] <- 2
criteria_matrix["performance", "price"] <- 5
criteria_matrix["quality", "style"] <- 4
criteria_matrix["quality", "price"] <- 3
criteria_matrix["style", "price"] <- 2
# Create a pairwise comparison object
criteria_comparison <- pairwise_comparison(criteria_matrix)
# Install and load the ahp package
#install.packages("D:/Torrent/ahp_0.2.12.tar.gz",repos=NULL,type = "source")
#install.packages(c("data.tree"))
#install.packages(c("formattable"))
# Install and load the ahp package
library(ahp)
# Define the criteria
criteria <- c("performance", "quality", "style", "price")
# Pairwise comparison matrix for criteria
criteria_matrix <- matrix(1, nrow = length(criteria), ncol = length(criteria))
rownames(criteria_matrix) <- colnames(criteria_matrix) <- criteria
# Populate the matrix with pairwise comparisons
criteria_matrix["performance", "quality"] <- 3   # Example values, you can adjust these based on actual comparisons
criteria_matrix["performance", "style"] <- 2
criteria_matrix["performance", "price"] <- 5
criteria_matrix["quality", "style"] <- 4
criteria_matrix["quality", "price"] <- 3
criteria_matrix["style", "price"] <- 2
# Calculate criteria weights using AHP
criteria_weights <- ahp(criteria_matrix)
# Install and load the ahp package
#install.packages("D:/Torrent/ahp_0.2.12.tar.gz",repos=NULL,type = "source")
#install.packages(c("data.tree"))
#install.packages(c("formattable"))
library(ahp)
# Wczytanie danych
data <- read.csv("data.csv")
# Definicja kryteriów i alternatyw
criteria <- c("Wydajność", "Jakość", "Styl", "Cena")
alternatives <- data$nazwa
# Wyznaczenie względnej ważności kryteriów
weights <- ahp(criteria)
# Install and load the ahp package
#install.packages(c("data.tree"))
#install.packages(c("formattable"))
install.packages("D:/Torrent/ahp_0.2.12.tar.gz",repos=NULL,type = "source")
library(ahp)
# Wczytanie danych
data <- read.csv("data.csv")
# Definicja kryteriów i alternatyw
criteria <- c("Wydajność", "Jakość", "Styl", "Cena")
alternatives <- data$nazwa
# Wyznaczenie względnej ważności kryteriów
weights <- ahp(criteria)
# Install and load the ahp package
#install.packages(c("data.tree"))
#install.packages(c("formattable"))
install.packages("D:/Torrent/ahp_0.2.12.tar.gz",repos=NULL,type = "source")
library(ahp)
# Dane o smartfonach Samsung
smartphones <- data.frame(
Nazwa = c("Samsung S23", "Samsung S24", "Samsung S21 FE", "Samsung M15", "Samsung M55", "Samsung A54", "Samsung A55", "Samsung A15", "Samsung M34", "Samsung A34"),
Wyswietlacz = c(6.1, 6.2, 6.4, 6.5, 6.7, 6.4, 6.6, 6.5, 6.5, 6.6),
RAM = c(8, 8, 6, 4, 8, 8, 8, 4, 6, 6),
ROM = c(256, 128, 128, 128, 128, 128, 128, 128, 128, 128),
Aparat = c(50, 50, 32, 50, 50, 50, 50, 50, 50, 48),
Cena = c(3000, 3800, 1900, 700, 1700, 1700, 2100, 900, 1000, 1300)
)
# Kryteria i ich wagi
criteria <- c("Wydajnosc", "Jakosc", "Styl", "Cena")
weights <- c(0.4, 0.3, 0.2, 0.1)
# Tworzenie hierarchii AHP
ahp_model <- ahp(criteria, weights)
install.packages("remotes")
remotes::install_github("r-barcelona/ahp")
remotes::install_github("jennybc/ahp")
# Load required packages
library(Rcpp)
# Load required packages
library(RcppEigen)
install.packages("Rcpp")
install.packages("RcppEigen")
install.packages("rlist")
# Load required packages
library(Rcpp)
library(RcppEigen)
library(rlist)
# Define the criteria
criteria <- c("performance", "quality", "style", "price")
# Pairwise comparison matrix for criteria
criteria_matrix <- matrix(1, nrow = length(criteria), ncol = length(criteria))
rownames(criteria_matrix) <- colnames(criteria_matrix) <- criteria
# Populate the matrix with pairwise comparisons
criteria_matrix["performance", "quality"] <- 3   # Example values, you can adjust these based on actual comparisons
criteria_matrix["performance", "style"] <- 2
criteria_matrix["performance", "price"] <- 5
criteria_matrix["quality", "style"] <- 4
criteria_matrix["quality", "price"] <- 3
criteria_matrix["style", "price"] <- 2
# Reflect the values across the diagonal
criteria_matrix <- reflect(criteria_matrix)
# Load required packages
library(Rcpp)
library(RcppEigen)
library(rlist)
# Define the criteria
criteria <- c("performance", "quality", "style", "price")
# Pairwise comparison matrix for criteria
criteria_matrix <- matrix(1, nrow = length(criteria), ncol = length(criteria))
rownames(criteria_matrix) <- colnames(criteria_matrix) <- criteria
# Populate the matrix with pairwise comparisons
criteria_matrix["performance", "quality"] <- 3   # Example values, you can adjust these based on actual comparisons
criteria_matrix["performance", "style"] <- 2
criteria_matrix["performance", "price"] <- 5
criteria_matrix["quality", "style"] <- 4
criteria_matrix["quality", "price"] <- 3
criteria_matrix["style", "price"] <- 2
# Reflect the values across the diagonal
criteria_matrix <- reflect(criteria_matrix)
# Load required packages
library(Rcpp)
library(RcppEigen)
library(rlist)
# Define the criteria
criteria <- c("performance", "quality", "style", "price")
# Pairwise comparison matrix for criteria
criteria_matrix <- matrix(1, nrow = length(criteria), ncol = length(criteria))
rownames(criteria_matrix) <- colnames(criteria_matrix) <- criteria
# Populate the matrix with pairwise comparisons
criteria_matrix["performance", "quality"] <- 3   # Example values, you can adjust these based on actual comparisons
criteria_matrix["performance", "style"] <- 2
criteria_matrix["performance", "price"] <- 5
criteria_matrix["quality", "style"] <- 4
criteria_matrix["quality", "price"] <- 3
criteria_matrix["style", "price"] <- 2
# Reflect the values across the diagonal
criteria_matrix <- reflect(criteria_matrix)
install.packages("reflect")
# Define the criteria
criteria <- c("performance", "quality", "style", "price")
# Pairwise comparison matrix for criteria
criteria_matrix <- matrix(1, nrow = length(criteria), ncol = length(criteria))
rownames(criteria_matrix) <- colnames(criteria_matrix) <- criteria
# Populate the matrix with pairwise comparisons
criteria_matrix["performance", "quality"] <- 3   # Example values, you can adjust these based on actual comparisons
criteria_matrix["performance", "style"] <- 2
criteria_matrix["performance", "price"] <- 5
criteria_matrix["quality", "style"] <- 4
criteria_matrix["quality", "price"] <- 3
criteria_matrix["style", "price"] <- 2
# Reflect the values across the diagonal
criteria_matrix <- reflect(criteria_matrix)
# Calculate the weights for criteria
criteria_weights <- calc_w(criteria_matrix)
# Print the criteria weights
criteria_weights
# Load required packages
library(Rcpp)
library(RcppEigen)
library(rlist)
install.packages("reflect")
# Define the criteria
criteria <- c("performance", "quality", "style", "price")
# Pairwise comparison matrix for criteria
criteria_matrix <- matrix(1, nrow = length(criteria), ncol = length(criteria))
rownames(criteria_matrix) <- colnames(criteria_matrix) <- criteria
# Populate the matrix with pairwise comparisons
criteria_matrix["performance", "quality"] <- 3   # Example values, you can adjust these based on actual comparisons
criteria_matrix["performance", "style"] <- 2
criteria_matrix["performance", "price"] <- 5
criteria_matrix["quality", "style"] <- 4
criteria_matrix["quality", "price"] <- 3
criteria_matrix["style", "price"] <- 2
# Reflect the values across the diagonal
criteria_matrix <- reflect(criteria_matrix)
# Calculate the weights for criteria
criteria_weights <- calc_w(criteria_matrix)
# Print the criteria weights
criteria_weights
# Define the smartphones and their attributes
smartphones <- c("Samsung S23", "Samsung S24", "Samsung S21 FE", "Samsung M15", "Samsung M55", "Samsung A54", "Samsung A55", "Samsung A15", "Samsung M34", "Samsung A34")
attributes <- data.frame(
display = c(6.1, 6.2, 6.4, 6.5, 6.7, 6.4, 6.6, 6.5, 6.5, 6.6),
ram = c(8, 8, 6, 4, 8, 8, 8, 4, 6, 6),
rom = c(256, 128, 128, 128, 128, 128, 128, 128, 128, 128),
camera = c(50, 50, 32, 50, 50, 50, 50, 50, 50, 48),
price = c(3000, 3800, 1900, 700, 1700, 1700, 2100, 900, 1000, 1300)
)
rownames(attributes) <- smartphones
# Define the criteria weights (replace with actual values)
criteria_weights <- list(
performance = 0.4,
quality = 0.3,
style = 0.2,
price = 0.1
)
# Calculate overall scores for each smartphone
overall_scores <- rowSums(attributes * sapply(criteria_weights, rep, nrow(attributes)))
# Rank smartphones based on overall scores
ranked_smartphones <- smartphones[order(overall_scores, decreasing = TRUE)]
# Print the ranked smartphones
ranked_smartphones
# Load required packages
# Define the criteria
criteria <- c("performance", "quality", "style", "price")
# Pairwise comparison matrix for criteria
criteria_matrix <- matrix(1, nrow = length(criteria), ncol = length(criteria))
rownames(criteria_matrix) <- colnames(criteria_matrix) <- criteria
# Populate the matrix with pairwise comparisons
criteria_matrix["performance", "quality"] <- 3   # Example values, you can adjust these based on actual comparisons
criteria_matrix["performance", "style"] <- 2
criteria_matrix["performance", "price"] <- 5
criteria_matrix["quality", "style"] <- 4
criteria_matrix["quality", "price"] <- 3
criteria_matrix["style", "price"] <- 2
# Reflect the values across the diagonal
criteria_matrix <- reflect(criteria_matrix)
# Calculate the weights for criteria
criteria_weights <- calc_w(criteria_matrix)
# Print the criteria weights
criteria_weights
# Define the smartphones and their attributes
smartphones <- c("Samsung S23", "Samsung S24", "Samsung S21 FE", "Samsung M15", "Samsung M55", "Samsung A54", "Samsung A55", "Samsung A15", "Samsung M34", "Samsung A34")
attributes <- data.frame(
display = c(6.1, 6.2, 6.4, 6.5, 6.7, 6.4, 6.6, 6.5, 6.5, 6.6),
ram = c(8, 8, 6, 4, 8, 8, 8, 4, 6, 6),
rom = c(256, 128, 128, 128, 128, 128, 128, 128, 128, 128),
camera = c(50, 50, 32, 50, 50, 50, 50, 50, 50, 48),
price = c(3000, 3800, 1900, 700, 1700, 1700, 2100, 900, 1000, 1300)
)
rownames(attributes) <- smartphones
# Define the criteria weights (replace with actual values)
criteria_weights <- list(
performance = 0.4,
quality = 0.3,
style = 0.2,
price = 0.1
)
# Calculate overall scores for each smartphone
overall_scores <- rowSums(attributes * sapply(criteria_weights, rep, nrow(attributes)))
# Rank smartphones based on overall scores
ranked_smartphones <- smartphones[order(overall_scores, decreasing = TRUE)]
# Print the ranked smartphones
ranked_smartphones
